---
import BaseLayout from "@components/base/BaseLayout.astro";
import type { DocsEntry, MenuItem } from "@/types";
import DocBrowser from "@components/docs/Browser.astro";
import TableOfContents from "@components/common/TableOfContents.astro";
import { render } from "astro:content";
import { ChildProcess } from "child_process";

interface Props {
  entry: DocsEntry;
  browserMenu: MenuItem[];
}

const { entry, browserMenu } = Astro.props;
const { Content, headings } = await render(entry);
const { title, description, hideNav, hideToc, image } = entry.data;

const globalHideNav = false; // set true to always hide the nav bar (left side menu)
const globalHideToc = false; // set true to always hide the table of contents (right side menu)
const tocDepth = 3; // maximum depth for the table of contents 1 = h1, etc

const actuallyHideNav = hideNav || globalHideNav;
const actuallyHideToc = hideToc || globalHideToc || headings.filter((heading) => heading.depth <= tocDepth).length === 0;

let articleClass = "";
let navClass = "";
let tocClass = "";

if (actuallyHideNav && actuallyHideToc) {
  // Both nav and toc are hidden
  navClass = "hidden";
  articleClass = "w-full";
  tocClass = "hidden";
} else if (!actuallyHideNav && actuallyHideToc) {
  // Nav is visible, toc is hidden
  navClass = "hidden md:flex md:w-1/4 lg:w-1/5";
  articleClass = "w-full md:w-3/4 lg:w-4/5";
  tocClass = "hidden";
} else if (actuallyHideNav && !actuallyHideToc) {
  // Nav is hidden, toc is visible
  navClass = "hidden";
  articleClass = "w-full lg:w-3/4 lg:w-4/5";
  tocClass = "hidden md:flex md:w-1/4 lg:w-1/5";
} else {
  // Both nav and toc are visble
  navClass = "hidden lg:flex md:w-1/4 lg:w-1/5";
  articleClass = "w-full lg:w-3/4 lg:w-3/5";
  tocClass = "hidden lg:flex lg:w-1/5";
}

const sideBarTitle = () =>{
  const defaultValue = "Navigate";
  let title = defaultValue; // default value in case of any error happen (will never take this value)
  for(let i=0;i<browserMenu.length;i++){
    // matching child
    const matchingChild = browserMenu[i].children.filter((child)=>child.id === entry.id.replace("/-index", ""))[0];
    if(matchingChild.id === entry.id.replace("/-index", "") && matchingChild.title){
      title = matchingChild.title;
      break;
    }
  }
  return title;
}
---

<BaseLayout title={title} image={image?.src} description={description}>
  <div class="fixed z-20 w-full bg-component-8">
  <div class="container  lg:pb-0 lg:bg-transparent rounded-b-md p-2">
    <div class="flex lg:hidden z-20 justify-start gap-2 left-0 w-full ">
      <details class="lg:hidden relative flex-1">
        <summary class="bg-component-1 glass text-component-8 px-4 py-2 rounded-md text-sm sm:text-base md:text-lg cursor-pointer ">{sideBarTitle}</summary>
        <div class="absolute top-[calc(100%+2px)] left-0 w-full">
          <DocBrowser
          menu={browserMenu}
          currentPage={entry.id.replace("/-index", "")}
          />
        </div>
      </details>
      <details class="lg:hidden relative ">
        <summary class="bg-component-1 glass text-component-8 px-4 py-2  rounded-md text-sm sm:text-base md:text-lg cursor-pointer ">On this page</summary>
        <div class="absolute top-[calc(100%+2px)] left-0 w-full overflow-hidden">
        <TableOfContents headings={headings} tocDepth={tocDepth} ShowTitle={false}/>
      </div>
      </details>
    </div>
  </div>
</div>
  <section class="flex flex-col lg:flex-row container mt-16 md:mt-20 lg:mt-8 relative">

    <div class=`max-h-static_sidemenu sticky lg:top-[4rem] mr-4 ${navClass}`>
      <DocBrowser
        menu={browserMenu}
        currentPage={entry.id.replace("/-index", "")}
      />
    </div>
    <div class=`w-full ${articleClass}`>
      <article >
        <section class="content mb-4 glass px-4 rounded-lg ">
          <Content />
        </section>
      </article>
    </div>
    <div class=`max-h-static_sidemenu sticky lg:top-[4rem] ml-4 ${tocClass}`>
      <TableOfContents headings={headings} tocDepth={tocDepth}  ShowTitle={true}/>
    </div>
  </section>
</BaseLayout>
